{"pageProps":{"frontmatter":{"title":"Recreating SNES Music with Chipsynth SFC","date":"2020-10-20","image":"./img/ocarina.png","tags":["synthesis"],"description":"Recently, Chipsynth SFC was released, which brings a really accurate emulation of the SNES soundchip to VST or standalone format. Let's play around with it."},"code":"var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var r=t=>s(t,\"__esModule\",{value:!0});var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{r(t);for(var a in e)s(t,a,{get:e[a],enumerable:!0})},g=(t,e,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of d(e))!m.call(t,i)&&i!==\"default\"&&s(t,i,{get:()=>e[i],enumerable:!(a=l(e,i))||a.enumerable});return t},w=t=>g(r(s(t!=null?h(p(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var c=u((v,o)=>{o.exports=_jsx_runtime});var S={};f(S,{default:()=>b,frontmatter:()=>y});var n=w(c()),y={title:\"Recreating SNES Music with Chipsynth SFC\",date:\"2020-10-20\",image:\"./img/ocarina.png\",tags:[\"synthesis\"],description:\"Recently, Chipsynth SFC was released, which brings a really accurate emulation of the SNES soundchip to VST or standalone format. Let's play around with it.\"};function k(t){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",span:\"span\",h3:\"h3\",img:\"img\",pre:\"pre\",code:\"code\",ol:\"ol\",li:\"li\"},t.components),{wrapper:a}=e,i=(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"I always get nostalgia when listening to the soundtracks of the \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Super_Nintendo_Entertainment_System\",children:\"SNES\"}),\", for example:\"]}),`\n`,(0,n.jsx)(\"audio\",{preload:\"\",id:\"audio1\",controls:\"controls\",src:\"https://fi.zophar.net/soundfiles/nintendo-snes-spc/legend-of-zelda-the-a-link-to-the-past/02%20Beginning%20of%20the%20Journey.mp3\",children:\"Your browser does not support HTML5 Audio!\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I transcribed many of those \",(0,n.jsx)(e.a,{href:\"https://musescore.com/user/27655463/sheetmusic\",children:\"here\"})]}),`\n`,(0,n.jsxs)(e.h2,{id:\"chipsynth-sfc\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#chipsynth-sfc\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Chipsynth SFC\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Recently, \",(0,n.jsx)(e.a,{href:\"https://www.plogue.com/products/chipsynth-sfc.html\",children:\"Chipsynth SFC\"}),` was released, which brings a really accurate emulation of the SNES soundchip to VST or standalone format.\nIt reminds me of `,(0,n.jsx)(e.a,{href:\"http://picopicose.com/software.html\",children:\"C700 VST\"}),`, but it seems much more stable and thought out.\nTo see the hard work that went into it, check out `,(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=V3yWXVAZgO0\",children:\"this video\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"spc-files\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#spc-files\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"SPC files\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Music on the SNES is packaged to SPC files, which can either be \",(0,n.jsx)(e.a,{href:\"https://www.smwcentral.net/?p=viewthread&t=86807\",children:\"ripped using an emulator\"}),\" or, more much easier, downloaded from \",(0,n.jsx)(e.a,{href:\"https://www.zophar.net/music/nintendo-snes-spc\",children:\"Zophars Music Domain\"}),`.\nThey can directly be played with Chipsynth SFC, or with external software like `,(0,n.jsx)(e.a,{href:\"https://www.bannister.org/software/ao.htm\",children:\"Audio Overload\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://www.smwcentral.net/?p=section&a=details&id=15205\",children:\"SPC700 Player\"}),`.\nWhile Audio Overload is easier to use, SPC700 Player displays more in depth information, but more on that later..`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"tracks--samples\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tracks--samples\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Tracks & Samples\"]}),`\n`,(0,n.jsx)(e.p,{children:`An SPC file contains up to 8 tracks where each can play 1 of 16 samples at a time.\nIt is quite common for tracks to switch samples wihle playing to achieve more versatile output.\nUsing a player, you can listen to individual tracks, which is good to analyze or transcribe a tune:`}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.img,{src:\"./img/spc/chipsynth_player.png\",alt:\"chipsynth player\"}),`\nchipsynth player`]}),`\n`,(0,n.jsxs)(\"div\",{style:{display:\"none\"},children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.img,{src:\"./img/spc/audiooverload_player.png\",alt:\"audiooverload player\"}),`\naudiooverload spc channels`]}),(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.img,{src:\"./img/spc/spc700_player.png\",alt:\"spc700 player\"}),`\nspc700 player. tracks are toggled with bottom left buttons. \"Src\" displays current instrument. You have to press left/right to navigate to that view.`]})]}),`\n`,(0,n.jsxs)(e.h3,{id:\"generating-midi-from-an-spc-file\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#generating-midi-from-an-spc-file\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Generating MIDI from an SPC file\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For some SPC files, it is possible to generate midi! Checkout \",(0,n.jsx)(e.a,{href:\"https://github.com/loveemu/spc_converters_legacy\",children:\"these\"}),\" \",(0,n.jsx)(e.a,{href:\"https://code.google.com/archive/p/loveemu/downloads?page=3\",children:\"links\"}),` to download converters for many SPC flavours.\nFor example to convert a nintendo flavoured SPC, you can use nintspc:`]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-bash\",children:(0,n.jsxs)(e.code,{className:\"language-bash\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"for\"}),\" \",(0,n.jsx)(e.span,{className:\"token for-or-select variable\",children:\"f\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"in\"}),\" *.spc\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"do\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"path/to/nintspc\"'}),\" \",(0,n.jsxs)(e.span,{className:\"token string\",children:['\"',(0,n.jsx)(e.span,{className:\"token variable\",children:\"$f\"}),'\"']}),\" \",(0,n.jsxs)(e.span,{className:\"token string\",children:['\"',(0,n.jsx)(e.span,{className:\"token variable\",children:\"$f\"}),'.mid\"']}),\" --loop \",(0,n.jsx)(e.span,{className:\"token number\",children:\"1\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),(0,n.jsx)(e.span,{className:\"token keyword\",children:\"done\"}),`\n`]})}),`\n`,(0,n.jsx)(e.p,{children:`The generated midi files will contain up to 8 tracks that represent the notes SPC tracks.\nThe selection of the correct samples & effects has to be done by hand.`}),`\n`,(0,n.jsxs)(e.h2,{id:\"recreating-a-soundtrack-with-a-daw--chipsynth-sfc\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#recreating-a-soundtrack-with-a-daw--chipsynth-sfc\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Recreating a soundtrack with a DAW + chipsynth SFC\"]}),`\n`,(0,n.jsx)(e.p,{children:`The generated (or self transcribed / composed) MIDI can now be used inside a DAW for playback with chipsynth sfc.\nI am using Ableton, but any DAW that allows routing MIDI messages should work.`}),`\n`,(0,n.jsxs)(e.p,{children:[`For the start, I recommend using a more simple tune without instrument switches or fancy effects.\nIn this example, I am using \"04 Wandering the Plains\" from `,(0,n.jsx)(e.a,{href:\"https://www.zophar.net/music/nintendo-snes-spc/super-mario-world\",children:\"Super Mario World\"}),\".\"]}),`\n`,(0,n.jsx)(\"audio\",{preload:\"\",controls:\"controls\",src:\"https://fi.zophar.net/soundfiles/nintendo-snes-spc/super-mario-world/04%20Wandering%20the%20Plains.mp3\",children:(0,n.jsx)(e.p,{children:\"Your browser does not support HTML5 Audio!\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"track-setup\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#track-setup\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Track Setup\"]}),`\n`,(0,n.jsx)(e.p,{children:`First, we need to prepare the DAW to be able to send multiple MIDI tracks to the chipsynth.\nWe will use PolyTimbral mode which means we have only a single instance of chipsynth SFC.\nThis is similar to how the real nintendo soundtracks were made.`}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"create 2 MIDI tracks, and add chipsynth SFC (use VST3 version!) to the second track.\"}),`\n`,(0,n.jsx)(e.li,{children:'Set \"Midi To\" of the first track to \"chipsynth SFC\".'}),`\n`,(0,n.jsx)(e.li,{children:\"Duplicate the first track until you have 8 MIDI tracks + the one with the chipsynth\"}),`\n`,(0,n.jsx)(e.li,{children:`Now for each of the first 8 tracks' \"MIDI To\", change \"Track In\" to \"N-chipsynth SFC\", where N is the MIDI tracks number`}),`\n`,(0,n.jsx)(e.li,{children:'Open chipsynth SFC and select preset \"Poly-Timbral > Init\".'}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.img,{src:\"./img/spc/abletontracks.png\",alt:\"ableton tracks\"}),`\nThis is how it should look like`]}),`\n`,(0,n.jsx)(e.p,{children:\"That's it! You can now save this project as a template so you don't have to set this up again.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"import-midi\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#import-midi\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Import MIDI\"]}),`\n`,(0,n.jsx)(e.p,{children:`To import a MIDI file to the tracks, drag and drop the file to the first MIDI track.\nIf there are less than 8 clips, move each clip to its correct track:`}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"./img/spc/abletontrackswithmidi.png\",alt:\"ableton tracks with midi\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"import-samples\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#import-samples\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Import Samples\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"open chipsynth SFC on the last track and select the Player Tab\"}),`\n`,(0,n.jsx)(e.li,{children:\"select the folder with your SPCs\"}),`\n`,(0,n.jsx)(e.li,{children:\"open the SPC file that was used to generate your MIDI\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"./img/spc/spcplayer.png\",alt:\"spc player\"})}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Before you continue, make sure you have no samples (press clear in the first tab).\"}),`\n`,(0,n.jsx)(e.li,{children:'Now, press play and then \"Grab all unique\" + \"Grab echo\". This should populate up to 8 samples.'}),`\n`,(0,n.jsx)(e.li,{children:\"Now you need to select the correct sample for each channel. To find out which is where, you can simply solo a track and then find the sound in the sample tab (press keyboard key to hear the selected sample).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Press play to hear the magic:\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"./img/spc/chipsynth_channels.png\",alt:\"chipsynth channels\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"fine-tuning\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#fine-tuning\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Fine Tuning\"]}),`\n`,(0,n.jsx)(e.p,{children:`Hopefully, the import went right and you are now hearing a more or less accurate soundtrack.\nTo really push the envelope (sry), we now need to find out the correct ADSR / volume / pitch for each channel.\nThis can be figured out by listening closely to the spc tracks, trying to match up each channel.\nIf you've started with a simple file (like me), this process should be a matter of 1-2 minutes.`}),`\n`,(0,n.jsxs)(e.h2,{id:\"so-what\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#so-what\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"So what?\"]}),`\n`,(0,n.jsx)(e.p,{children:`Now you know how to take apart an original SNES composition and put it back together in a modern environment.\nOf course this is just the starting point, from here you can learn from existing tracks, alter them or create brand new ones..\nFor me, this is mostly a combination of nostalgia and the urge to learn about music composition + arrangement.`}),`\n`,(0,n.jsx)(e.p,{children:`I'll close this one with an \"slightly\" altered version of the Donut Plains:`}),`\n`,(0,n.jsx)(\"audio\",{preload:\"\",controls:\"controls\",src:\"./audio/DonutPlainsMinor.mp3\",children:(0,n.jsx)(e.p,{children:\"Your browser does not support HTML5 Audio!\"})})]});return a?(0,n.jsx)(a,Object.assign({},t,{children:i})):i}var b=k;return S;})();\n;return Component.default;"},"__N_SSG":true}